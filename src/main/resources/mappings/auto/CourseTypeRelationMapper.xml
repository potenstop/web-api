<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.potens.web.dao.db.auto.CourseTypeRelationMapper">
  <resultMap id="BaseResultMap" type="top.potens.web.model.CourseTypeRelation">
    <id column="course_type_relation_id" jdbcType="INTEGER" property="courseTypeRelationId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="course_id" jdbcType="INTEGER" property="courseId" />
    <result column="course_stair_id" jdbcType="INTEGER" property="courseStairId" />
    <result column="course_second_id" jdbcType="INTEGER" property="courseSecondId" />
    <result column="course_three_id" jdbcType="INTEGER" property="courseThreeId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    course_type_relation_id, create_time, update_time, course_id, course_stair_id, course_second_id, 
    course_three_id
  </sql>
  <select id="selectByExample" parameterType="top.potens.web.model.CourseTypeRelationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from `course_type_relation`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from `course_type_relation`
    where course_type_relation_id = #{courseTypeRelationId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `course_type_relation`
    where course_type_relation_id = #{courseTypeRelationId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="top.potens.web.model.CourseTypeRelationExample">
    delete from `course_type_relation`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="top.potens.web.model.CourseTypeRelation">
    <selectKey keyProperty="courseTypeRelationId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `course_type_relation` (create_time, update_time, course_id, 
      course_stair_id, course_second_id, course_three_id
      )
    values (#{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{courseId,jdbcType=INTEGER}, 
      #{courseStairId,jdbcType=INTEGER}, #{courseSecondId,jdbcType=INTEGER}, #{courseThreeId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="top.potens.web.model.CourseTypeRelation">
    <selectKey keyProperty="courseTypeRelationId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `course_type_relation`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="courseId != null">
        course_id,
      </if>
      <if test="courseStairId != null">
        course_stair_id,
      </if>
      <if test="courseSecondId != null">
        course_second_id,
      </if>
      <if test="courseThreeId != null">
        course_three_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="courseStairId != null">
        #{courseStairId,jdbcType=INTEGER},
      </if>
      <if test="courseSecondId != null">
        #{courseSecondId,jdbcType=INTEGER},
      </if>
      <if test="courseThreeId != null">
        #{courseThreeId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="top.potens.web.model.CourseTypeRelationExample" resultType="java.lang.Long">
    select count(*) from `course_type_relation`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update `course_type_relation`
    <set>
      <if test="record.courseTypeRelationId != null">
        course_type_relation_id = #{record.courseTypeRelationId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.courseId != null">
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.courseStairId != null">
        course_stair_id = #{record.courseStairId,jdbcType=INTEGER},
      </if>
      <if test="record.courseSecondId != null">
        course_second_id = #{record.courseSecondId,jdbcType=INTEGER},
      </if>
      <if test="record.courseThreeId != null">
        course_three_id = #{record.courseThreeId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update `course_type_relation`
    set course_type_relation_id = #{record.courseTypeRelationId,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      course_id = #{record.courseId,jdbcType=INTEGER},
      course_stair_id = #{record.courseStairId,jdbcType=INTEGER},
      course_second_id = #{record.courseSecondId,jdbcType=INTEGER},
      course_three_id = #{record.courseThreeId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="top.potens.web.model.CourseTypeRelation">
    update `course_type_relation`
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="courseId != null">
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="courseStairId != null">
        course_stair_id = #{courseStairId,jdbcType=INTEGER},
      </if>
      <if test="courseSecondId != null">
        course_second_id = #{courseSecondId,jdbcType=INTEGER},
      </if>
      <if test="courseThreeId != null">
        course_three_id = #{courseThreeId,jdbcType=INTEGER},
      </if>
    </set>
    where course_type_relation_id = #{courseTypeRelationId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="top.potens.web.model.CourseTypeRelation">
    update `course_type_relation`
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      course_id = #{courseId,jdbcType=INTEGER},
      course_stair_id = #{courseStairId,jdbcType=INTEGER},
      course_second_id = #{courseSecondId,jdbcType=INTEGER},
      course_three_id = #{courseThreeId,jdbcType=INTEGER}
    where course_type_relation_id = #{courseTypeRelationId,jdbcType=INTEGER}
  </update>
</mapper>