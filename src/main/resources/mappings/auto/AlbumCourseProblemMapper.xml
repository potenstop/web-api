<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.potens.web.dao.db.auto.AlbumCourseProblemMapper">
  <resultMap id="BaseResultMap" type="top.potens.web.model.AlbumCourseProblem">
    <id column="album_course_problem_id" jdbcType="INTEGER" property="albumCourseProblemId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="album_id" jdbcType="INTEGER" property="albumId" />
    <result column="album_course_id" jdbcType="INTEGER" property="albumCourseId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="state" jdbcType="TINYINT" property="state" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    album_course_problem_id, create_time, update_time, album_id, album_course_id, user_id, 
    `state`
  </sql>
  <select id="selectByExample" parameterType="top.potens.web.model.AlbumCourseProblemExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from `album_course_problem`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from `album_course_problem`
    where album_course_problem_id = #{albumCourseProblemId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `album_course_problem`
    where album_course_problem_id = #{albumCourseProblemId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="top.potens.web.model.AlbumCourseProblemExample">
    delete from `album_course_problem`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="top.potens.web.model.AlbumCourseProblem">
    <selectKey keyProperty="albumCourseProblemId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `album_course_problem` (create_time, update_time, album_id, 
      album_course_id, user_id, `state`
      )
    values (#{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{albumId,jdbcType=INTEGER}, 
      #{albumCourseId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{state,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="top.potens.web.model.AlbumCourseProblem">
    <selectKey keyProperty="albumCourseProblemId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `album_course_problem`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="albumId != null">
        album_id,
      </if>
      <if test="albumCourseId != null">
        album_course_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="state != null">
        `state`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="albumId != null">
        #{albumId,jdbcType=INTEGER},
      </if>
      <if test="albumCourseId != null">
        #{albumCourseId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="top.potens.web.model.AlbumCourseProblemExample" resultType="java.lang.Long">
    select count(*) from `album_course_problem`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update `album_course_problem`
    <set>
      <if test="record.albumCourseProblemId != null">
        album_course_problem_id = #{record.albumCourseProblemId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.albumId != null">
        album_id = #{record.albumId,jdbcType=INTEGER},
      </if>
      <if test="record.albumCourseId != null">
        album_course_id = #{record.albumCourseId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.state != null">
        `state` = #{record.state,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update `album_course_problem`
    set album_course_problem_id = #{record.albumCourseProblemId,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      album_id = #{record.albumId,jdbcType=INTEGER},
      album_course_id = #{record.albumCourseId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      `state` = #{record.state,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="top.potens.web.model.AlbumCourseProblem">
    update `album_course_problem`
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="albumId != null">
        album_id = #{albumId,jdbcType=INTEGER},
      </if>
      <if test="albumCourseId != null">
        album_course_id = #{albumCourseId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        `state` = #{state,jdbcType=TINYINT},
      </if>
    </set>
    where album_course_problem_id = #{albumCourseProblemId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="top.potens.web.model.AlbumCourseProblem">
    update `album_course_problem`
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      album_id = #{albumId,jdbcType=INTEGER},
      album_course_id = #{albumCourseId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      `state` = #{state,jdbcType=TINYINT}
    where album_course_problem_id = #{albumCourseProblemId,jdbcType=INTEGER}
  </update>
</mapper>